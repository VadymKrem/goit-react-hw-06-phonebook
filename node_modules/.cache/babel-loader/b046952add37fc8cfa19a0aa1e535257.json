{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\GitHub\\\\goit-react-hw-06-phonebook\\\\src\\\\components\\\\ContactForm\\\\ContactForm.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, Label, Input, Button } from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContactsList } from 'Redux/selectors';\nimport { addContact } from 'Redux/phonebookSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContactForm = () => {\n  _s();\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContactsList);\n\n  const dataSubmitForm = event => {\n    event.preventDefault();\n    const searchContact = contacts.find(contact => contact.name === name);\n\n    if (searchContact) {\n      alert(`${name} is already in contacts`);\n      return false;\n    }\n\n    dispatch(addContact({\n      name,\n      number\n    }));\n    setName('');\n    setNumber('');\n  };\n\n  const handleChangeName = evt => setName(evt.target.value);\n\n  const handleChangeNumber = evt => setNumber(evt.target.value);\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: dataSubmitForm,\n    children: [/*#__PURE__*/_jsxDEV(Label, {\n      children: [' ', \"Name\", /*#__PURE__*/_jsxDEV(Input, {\n        type: \"text\",\n        name: \"name\",\n        value: name,\n        onChange: handleChangeName,\n        pattern: \"^[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]+(([' \\\\-][a-zA-Z\\u0430-\\u044F\\u0410-\\u042F ])?[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]*)*$\",\n        title: \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Label, {\n      children: [' ', \"Number\", /*#__PURE__*/_jsxDEV(Input, {\n        type: \"tel\",\n        name: \"number\",\n        value: number,\n        onChange: handleChangeNumber,\n        pattern: \"\\\\+?\\\\d{1,4}?[ .\\\\-\\\\s]?\\\\(?\\\\d{1,3}?\\\\)?[ .\\\\-\\\\s]?\\\\d{1,4}[ .\\\\-\\\\s]?\\\\d{1,4}[ .\\\\-\\\\s]?\\\\d{1,9}\",\n        title: \"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"submit\",\n      children: \"Add contact\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this); // state = {\n  //   name: '',\n  //   number: '',\n  // };\n  // handleChange = event => {\n  //   const { name } = event.currentTarget;\n  //   this.setState({ [name]: event.currentTarget.value });\n  // };\n  // dataSubmitForm = event => {\n  //   event.preventDefault();\n  //   this.props.formSubmit(this.state);\n  //   this.reset();\n  // };\n  // reset = () => {\n  //   this.setState({ name: '', number: '' });\n  // };\n  // render() {\n  //   return (\n  //     <Form onSubmit={this.dataSubmitForm}>\n  //       <Label>\n  //         {' '}\n  //         Name\n  //         <Input\n  //           type=\"text\"\n  //           name=\"name\"\n  //           value={this.state.name}\n  //           onChange={this.handleChange}\n  //           pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n  //           title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n  //           required\n  //         />\n  //       </Label>\n  //       <Label>\n  //         {' '}\n  //         Number\n  //         <Input\n  //           type=\"tel\"\n  //           name=\"number\"\n  //           value={this.state.number}\n  //           onChange={this.handleChange}\n  //           pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n  //           title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n  //           required\n  //         />\n  //       </Label>\n  //       <Button type=\"submit\">Add contact</Button>\n  //     </Form>\n  //   );\n  // }\n};\n\n_s(ContactForm, \"N87tOaNN+9L+ijtUAaGO2ahm1xA=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = ContactForm;\nContactForm.propTypes = {\n  onSubmit: PropTypes.func,\n  type: PropTypes.string,\n  name: PropTypes.string,\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n  pattern: PropTypes.string,\n  title: PropTypes.string,\n  required: PropTypes.bool\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactForm\");","map":{"version":3,"sources":["C:/Users/User/Documents/GitHub/goit-react-hw-06-phonebook/src/components/ContactForm/ContactForm.jsx"],"names":["useState","PropTypes","Form","Label","Input","Button","useDispatch","useSelector","getContactsList","addContact","ContactForm","name","setName","number","setNumber","dispatch","contacts","dataSubmitForm","event","preventDefault","searchContact","find","contact","alert","handleChangeName","evt","target","value","handleChangeNumber","propTypes","onSubmit","func","type","string","onChange","pattern","title","required","bool"],"mappings":"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","sourcesContent":["import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Form, Label, Input, Button } from './ContactForm.styled';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getContactsList } from 'Redux/selectors';\r\nimport { addContact } from 'Redux/phonebookSlice';\r\n\r\nexport const ContactForm = () => {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const dispatch = useDispatch();\r\n  const contacts = useSelector(getContactsList);\r\n\r\n  const dataSubmitForm = event => {\r\n    event.preventDefault();\r\n    const searchContact = contacts.find(contact => contact.name === name);\r\n    if (searchContact) {\r\n      alert(`${name} is already in contacts`);\r\n      return false;\r\n    }\r\n    dispatch(addContact({ name, number }));\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n  const handleChangeName = evt => setName(evt.target.value);\r\n  const handleChangeNumber = evt => setNumber(evt.target.value);\r\n  return (\r\n    <Form onSubmit={dataSubmitForm}>\r\n      <Label>\r\n        {' '}\r\n        Name\r\n        <Input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={name}\r\n          onChange={handleChangeName}\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n          required\r\n        />\r\n      </Label>\r\n      <Label>\r\n        {' '}\r\n        Number\r\n        <Input\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          value={number}\r\n          onChange={handleChangeNumber}\r\n          pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\r\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n          required\r\n        />\r\n      </Label>\r\n      <Button type=\"submit\">Add contact</Button>\r\n    </Form>\r\n  );\r\n  // state = {\r\n  //   name: '',\r\n  //   number: '',\r\n  // };\r\n  // handleChange = event => {\r\n  //   const { name } = event.currentTarget;\r\n  //   this.setState({ [name]: event.currentTarget.value });\r\n  // };\r\n  // dataSubmitForm = event => {\r\n  //   event.preventDefault();\r\n  //   this.props.formSubmit(this.state);\r\n  //   this.reset();\r\n  // };\r\n  // reset = () => {\r\n  //   this.setState({ name: '', number: '' });\r\n  // };\r\n  // render() {\r\n  //   return (\r\n  //     <Form onSubmit={this.dataSubmitForm}>\r\n  //       <Label>\r\n  //         {' '}\r\n  //         Name\r\n  //         <Input\r\n  //           type=\"text\"\r\n  //           name=\"name\"\r\n  //           value={this.state.name}\r\n  //           onChange={this.handleChange}\r\n  //           pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n  //           title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n  //           required\r\n  //         />\r\n  //       </Label>\r\n  //       <Label>\r\n  //         {' '}\r\n  //         Number\r\n  //         <Input\r\n  //           type=\"tel\"\r\n  //           name=\"number\"\r\n  //           value={this.state.number}\r\n  //           onChange={this.handleChange}\r\n  //           pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\r\n  //           title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n  //           required\r\n  //         />\r\n  //       </Label>\r\n  //       <Button type=\"submit\">Add contact</Button>\r\n  //     </Form>\r\n  //   );\r\n  // }\r\n};\r\n\r\nContactForm.propTypes = {\r\n  onSubmit: PropTypes.func,\r\n  type: PropTypes.string,\r\n  name: PropTypes.string,\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n  pattern: PropTypes.string,\r\n  title: PropTypes.string,\r\n  required: PropTypes.bool,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}