{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\GitHub\\\\goit-react-hw-06-phonebook\\\\src\\\\components\\\\ContactList\\\\ContactList.jsx\",\n    _s = $RefreshSig$();\n\nimport { ContactListItem } from './ContactListItem/ContactListItem';\nimport { List } from './ContactList.styled'; // import PropTypes from 'prop-types';\n\nimport { useSelector } from 'react-redux';\nimport { getContactsFilter, getContactsList } from 'Redux/selectors';\nimport { createSelector } from '@reduxjs/toolkit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContactList = () => {\n  _s();\n\n  const contacts = useSelector(getContactsList);\n  const filter = useSelector(getContactsFilter);\n  const filteredContacts = createSelector([getContactsFilter, getContactsList], (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\n  });\n  const visibleContacts = useSelector(filteredContacts);\n  return /*#__PURE__*/_jsxDEV(List, {\n    children: visibleContacts.map(_ref => {\n      let {\n        id,\n        name,\n        number\n      } = _ref;\n      return /*#__PURE__*/_jsxDEV(ContactListItem, {\n        name: name,\n        number: number,\n        id: id\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}; // ContactList.propTypes = {\n//   contacts: PropTypes.array.isRequired,\n//   onDelete: PropTypes.func.isRequired,\n// };\n\n_s(ContactList, \"uTvr1/MaPRpmzmL4CAAfx1/4d/I=\", false, function () {\n  return [useSelector, useSelector, useSelector];\n});\n\n_c = ContactList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactList\");","map":{"version":3,"sources":["C:/Users/User/Documents/GitHub/goit-react-hw-06-phonebook/src/components/ContactList/ContactList.jsx"],"names":["ContactListItem","List","useSelector","getContactsFilter","getContactsList","createSelector","ContactList","contacts","filter","filteredContacts","normalizedFilter","toLowerCase","contact","name","includes","visibleContacts","map","id","number"],"mappings":";;;AAAA,SAASA,eAAT,QAAgC,mCAAhC;AACA,SAASC,IAAT,QAAqB,sBAArB,C,CACA;;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,iBAAT,EAA4BC,eAA5B,QAAmD,iBAAnD;AACA,SAASC,cAAT,QAA+B,kBAA/B;;AAEA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAAA;;AAC/B,QAAMC,QAAQ,GAAGL,WAAW,CAACE,eAAD,CAA5B;AACA,QAAMI,MAAM,GAAGN,WAAW,CAACC,iBAAD,CAA1B;AACA,QAAMM,gBAAgB,GAAGJ,cAAc,CACrC,CAACF,iBAAD,EAAoBC,eAApB,CADqC,EAErC,CAACG,QAAD,EAAWC,MAAX,KAAsB;AACpB,UAAME,gBAAgB,GAAGF,MAAM,CAACG,WAAP,EAAzB;AACA,WAAOJ,QAAQ,CAACC,MAAT,CAAgBI,OAAO,IAC5BA,OAAO,CAACC,IAAR,CAAaF,WAAb,GAA2BG,QAA3B,CAAoCJ,gBAApC,CADK,CAAP;AAGD,GAPoC,CAAvC;AASA,QAAMK,eAAe,GAAGb,WAAW,CAACO,gBAAD,CAAnC;AACA,sBACE,QAAC,IAAD;AAAA,cACGM,eAAe,CAACC,GAAhB,CAAoB;AAAA,UAAC;AAAEC,QAAAA,EAAF;AAAMJ,QAAAA,IAAN;AAAYK,QAAAA;AAAZ,OAAD;AAAA,0BACnB,QAAC,eAAD;AAA0B,QAAA,IAAI,EAAEL,IAAhC;AAAsC,QAAA,MAAM,EAAEK,MAA9C;AAAsD,QAAA,EAAE,EAAED;AAA1D,SAAsBA,EAAtB;AAAA;AAAA;AAAA;AAAA,cADmB;AAAA,KAApB;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CApBM,C,CAsBP;AACA;AACA;AACA;;GAzBaX,W;UACMJ,W,EACFA,W,EAUSA,W;;;KAZbI,W","sourcesContent":["import { ContactListItem } from './ContactListItem/ContactListItem';\r\nimport { List } from './ContactList.styled';\r\n// import PropTypes from 'prop-types';\r\nimport { useSelector } from 'react-redux';\r\nimport { getContactsFilter, getContactsList } from 'Redux/selectors';\r\nimport { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const ContactList = () => {\r\n  const contacts = useSelector(getContactsList);\r\n  const filter = useSelector(getContactsFilter);\r\n  const filteredContacts = createSelector(\r\n    [getContactsFilter, getContactsList],\r\n    (contacts, filter) => {\r\n      const normalizedFilter = filter.toLowerCase();\r\n      return contacts.filter(contact =>\r\n        contact.name.toLowerCase().includes(normalizedFilter)\r\n      );\r\n    }\r\n  );\r\n  const visibleContacts = useSelector(filteredContacts);\r\n  return (\r\n    <List>\r\n      {visibleContacts.map(({ id, name, number }) => (\r\n        <ContactListItem key={id} name={name} number={number} id={id} />\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n\r\n// ContactList.propTypes = {\r\n//   contacts: PropTypes.array.isRequired,\r\n//   onDelete: PropTypes.func.isRequired,\r\n// };\r\n"]},"metadata":{},"sourceType":"module"}